mainmodule pagerank_chunk {
  readonly CProxy_Main mainProxy;
  readonly CProxy_UpdateStore updateStoreProxy;
  readonly unsigned int numChunks;
  readonly unsigned int verticesPerChunk;

  mainchare Main {
    entry Main(CkArgMsg *m);
    entry void initDone(void);
    entry [reductiontarget] void startComputation(unsigned int count);
    entry [reductiontarget] void done(float maxVal);
  };

  nodegroup UpdateStore {
    entry UpdateStore(int numChunks);
  }

  array [1D] Graph {
    entry Graph(int numVertices, int numElements);
    entry [inline] void addAllEdges(std::vector<unsigned int> degs, std::vector<unsigned int> dests);
    entry void getEdgeCount(CkCallback cb);
    entry [threaded] void runpagerank(float alpha, int iters);
    entry void update(float alpha);
    entry void iterate();
    entry void addB(int incomingIndex);
    entry [inline] void addB(std::vector<std::pair<unsigned int, float>> b_in);
    entry void returnResults();
    entry void callAtSync();
  };
};
